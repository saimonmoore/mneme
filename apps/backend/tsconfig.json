{
  "extends": "tsconfig/base.json",
  "compilerOptions": {
    "target": "esnext", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "emitDecoratorMetadata": true, /* Emit design-type metadata for decorated declarations in source files. */
    "module": "nodenext", /* Specify what module code is generated. */
    "moduleResolution": "nodenext", /* Specify how TypeScript looks up a file from a given module specifier. */
    "baseUrl": "./src", /* Specify the base directory to resolve non-relative module names. */
    "paths": {
      "#config/*": [
        "./config/*"
      ],
      "#Analysis/*": [
        "./modules/Analysis/*"
      ],
      "#Record/*": [
        "./modules/Record/*"
      ],
      "#Session/*": [
        "./modules/Session/*"
      ],
      "#Shared/*": [
        "./modules/Shared/*"
      ],
      "#Types/*": [
        "./@types/*"
      ],
      "#User/*": [
        "./modules/User/*"
      ],
      "#infrastructure/*": [
        "./infrastructure/*"
      ]
    },
    "types": [
      "node"
    ],
    "allowJs": true, /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    "outDir": "./dist", /* Specify an output folder for all emitted files. */
    "downlevelIteration": true, /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    "noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "noUnusedLocals": true, /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true, /* Raise an error when a function parameter isn't read. */
    "noImplicitReturns": true, /* Enable error reporting for codepaths that do not explicitly return in a function. */
  },
  "include": [
    "./src"
  ],
  "exclude": [
    "./typings.d.ts",
    "dist",
    "build",
    "node_modules",
    "coverage"
  ]
}
